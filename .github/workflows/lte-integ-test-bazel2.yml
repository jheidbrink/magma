---

name: LTE integ test with Bazel-built binaries

on:  # yamllint disable-line rule:truthy
  workflow_dispatch:
    inputs:
      remote_cache:
        description: Use the remote cache
        type: boolean
        default: true
      without_fabric:
        description: Dont even use Fabric to run the actual integ tests
        type: boolean
        default: false
  workflow_run:
    workflows:
      - build-all
    branches:
      - master
      - 'v1.*'
    types:
      - completed

jobs:
  lte-integ-test-bazel:
    if: github.repository_owner == 'magma' || github.event_name == 'workflow_dispatch'
    runs-on: macos-10.15
    env:
      SHA: ${{ github.event.workflow_run.head_commit.id || github.sha }}
    steps:
      - name: Print inputs
        run: |
          echo "remote_cache: ${{ github.event.inputs.remote_cache }}"
          echo "Without Fabric: ${{ github.event.inputs.without_fabric }}"
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.SHA }}
      - name: Install pre requisites
        run: |
          pip3 install --upgrade pip
          pip3 install ansible fabric3 jsonpickle requests PyYAML firebase_admin
          vagrant plugin install vagrant-vbguest vagrant-disksize
      - name: Open up network interfaces for VM
        run: |
          sudo mkdir -p /etc/vbox/
          sudo touch /etc/vbox/networks.conf
          sudo sh -c "echo '* 192.168.0.0/16' > /etc/vbox/networks.conf"
      - name: Provision the magma VM
        run: |
          cd lte/gateway
          export MAGMA_DEV_CPUS=3
          export MAGMA_DEV_MEMORY_MB=9216
          vagrant up magma
      - name: Setup remote cache
        if: github.event.inputs.remote_cache == 'true'
        run:  |
          bazel/scripts/remote_cache_bazelrc_setup.sh vm-bazel-integ-test "${{ secrets.BAZEL_REMOTE_PASSWORD }}"
      - name: Build with Bazel
        run: |
          cd lte/gateway
          echo "cd magma && bazel build $(bazel query 'kind(.*_binary, //lte/gateway/... union //orc8r/gateway/...)')" | vagrant ssh magma
      - name: Adapt systemd services to use Bazel-built binaries
        run: |
          cd lte/gateway
          echo "sudo cp magma/lte/gateway/deploy/roles/magma/files/systemd_bazel/* /etc/systemd/system/ && sudo systemctl daemon-reload" | vagrant ssh magma
      - name: Run the integ test with Fabric
        if: github.event.inputs.without_fabric == 'false'
        run: |
          cd lte/gateway
          fab integ_test_nobuild
      - name: Run the sudo python tests without Fabric
        if: github.event.inputs.without_fabric == 'true'
        run: |
          cd lte/gateway
          echo "cd magma/lte/gateway && make test_sudo_python" | vagrant ssh magma
      - name: Start and provision the magma_trfserver VM
        if: github.event.inputs.without_fabric == 'true'
        run: |
          cd lte/gateway
          vagrant up magma_trfserver
      - name: Start and provision the magma_test VM
        if: github.event.inputs.without_fabric == 'true'
        run: |
          cd lte/gateway
          vagrant up magma_test
      - name: Build Python
        if: github.event.inputs.without_fabric == 'true'
        run: |
          cd lte/gateway
          echo "cd magma/lte/gateway/python && make" | vagrant ssh magma_test
      - name: Build the integ tests
        if: github.event.inputs.without_fabric == 'true'
        run: |
          cd lte/gateway
          echo "cd magma/lte/gateway/python/integ_tests && make" | vagrant ssh magma_test
      - name: Disable TCP checksumming everywhere
        if: github.event.inputs.without_fabric == 'true'
        run: |
          cd lte/gateway
          echo "sudo ethtool --offload eth1 rx off tx off; sudo ethtool --offload eth2 rx off tx off" | vagrant ssh magma
          echo "sudo ethtool --offload eth1 rx off tx off; sudo ethtool --offload eth2 rx off tx off" | vagrant ssh magma_test
          echo "sudo ethtool --offload eth1 rx off tx off; sudo ethtool --offload eth2 rx off tx off" | vagrant ssh magma_trfserver
      - name: Start trfserver
        if: github.event.inputs.without_fabric == 'true'
        run: |
          cd lte/gateway
          echo "sudo /usr/local/bin/traffic_server.py --daemon 192.168.60.144 62462 >/dev/null 2>/dev/null" | vagrant ssh magma_trfserver
      - name: Start magma
        if: github.event.inputs.without_fabric == 'true'
        run: |
          cd lte/gateway
          echo "sudo systemctl start magma@magmad" | vagrant ssh magma
      - name: Run the integ tests
        if: github.event.inputs.without_fabric == 'true'
        run: |
          cd lte/gateway
          echo "sudo ethtool --offload eth1 rx off tx off; sudo ethtool --offload eth2 rx off tx off;" | vagrant ssh magma_test
          vagrant ssh --command "cd magma/lte/gateway/python/integ_tests && source ~/build/python/bin/activate && export GATEWAY_IP=192.168.60.142 && make -i integ_test enable-flaky-retry=true" magma_test
      - name: Get test results
        if: always()
        run: |
          cd lte/gateway
          fab get_test_summaries:dst_path="test-results"
          ls -R
      - name: Upload test results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test-results
          path: lte/gateway/test-results/**/*.xml
      - name: Get test logs
        if: failure()
        run: |
          cd lte/gateway
          fab get_test_logs:dst_path=./logs.tar.gz
      - name: Upload test logs
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: test-logs
          path: lte/gateway/logs.tar.gz
      - name: Publish Unit Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action/composite@v1
        with:
          files: lte/gateway/test-results/**/*.xml
          check_run_annotations: all tests
      - name: Publish results to Firebase
        if: always() && github.event.workflow_run.event == 'push'
        env:
          FIREBASE_SERVICE_CONFIG: ${{ secrets.FIREBASE_SERVICE_CONFIG }}
          REPORT_FILENAME: "lte_integ_test_${{ env.SHA }}.html"
        run: |
          npm install -g xunit-viewer
          [ -d "lte/gateway/test-results/" ] && { xunit-viewer -r lte/gateway/test-results/ -o "$REPORT_FILENAME"; }
          [ -f "$REPORT_FILENAME" ] && { python ci-scripts/firebase_upload_file.py -f "$REPORT_FILENAME" -o out_url.txt; }
          [ -f "out_url.txt" ] && { URL=$(cat out_url.txt); }
          python ci-scripts/firebase_publish_report.py -id ${{ env.SHA }} --verdict ${{ job.status }} --run_id ${{ github.run_id }} lte --url $URL
      - name: Notify failure to slack
        if: failure() && github.event.workflow_run.event == 'push'
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: "LTE integ test"
          SLACK_AVATAR: ":boom:"
        uses: Ilshidur/action-slack@2.1.0
        with:
          args: "LTE integration test test failed on [${{ env.SHA }}](${{github.event.repository.owner.html_url}}/magma/commit/${{ env.SHA }}): ${{ steps.commit.outputs.title}}"
